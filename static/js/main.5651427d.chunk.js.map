{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","DeviceContext.js","constants.js","Web3Context.js","styles.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","DeviceContext","React","createContext","DeviceProvider","children","useState","fingerPrint","console","log","useEffect","Provider","value","qr","window","location","search","split","isOwned","address","Web3Context","blockPoint","Meowbject","networks","provider","Web3","providers","HttpProvider","web3","meowb","eth","Contract","abi","meow","initialState","fetcher","response","status","ownership","owner","tributes","reducer","state","action","type","what","JSON","stringify","Web3Provider","useReducer","dispatch","deviceAddress","setDeviceAddress","useContext","a","hashedFP","utils","keccak256","methods","checkAccount","call","account","net","getId","getAccounts","gAddress","addAccount","send","from","newAddress","accounts","create","addA","encodedABI","encodeABI","tx","to","gas","data","signTransaction","privateKey","signedT","sendSignedTransaction","rawTransaction","checkOwner","getTributes","claimQR","events","MeowError","returnValues","message","_id","FetchStatus","styled","div","Owntainer","Owner","Button","button","LogtainerTitle","Logtainer","App","checkQR","thereIsQR","color","useRef","three","current","getColor","scene","THREE","halfHeight","innerHeight","camera","innerWidth","renderer","alpha","setSize","setClearColor","appendChild","domElement","geometry","shape","material","emissive","shininess","specular","cube","add","spotLight","position","set","light","z","animate","requestAnimationFrame","rotation","x","y","render","ref","style","textAlign","fontSize","textDecoration","lineHeight","onClick","map","l","i","key","borderBottom","padding","overflowWrap","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5651427d.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 314;","import React, { useEffect, useState } from \"react\";\nimport Fingerprint2 from \"fingerprintjs2\";\nexport const DeviceContext = React.createContext();\n\nconst DeviceProvider = ({ children }) => {\n  const [fingerPrint, setFingerPrint] = useState(\"crabmeepo\");\n  console.log(fingerPrint);\n  useEffect(() => {\n    const getFingerPrint = () => {\n      if (window.requestIdleCallback) {\n        requestIdleCallback(function () {\n          Fingerprint2.get(function (components) {\n            var values = components.map(function (component) {\n              return component.value;\n            });\n            var murmur = Fingerprint2.x64hash128(values.join(\"\"), 31);\n            setFingerPrint(murmur);\n          });\n        });\n      } else {\n        setTimeout(function () {\n          Fingerprint2.get(function (components) {\n            var values = components.map(function (component) {\n              return component.value;\n            });\n            var murmur = Fingerprint2.x64hash128(values.join(\"\"), 31);\n            setFingerPrint(murmur);\n          });\n        }, 500);\n      }\n    };\n    // getFingerPrint();\n  }, []);\n\n  return (\n    <DeviceContext.Provider value={fingerPrint}>\n      {children}\n    </DeviceContext.Provider>\n  );\n};\n\nexport default DeviceProvider;\n","\nconst qr = window.location.search ? window.location.search.split('?')[1].split(\"-\") : [1, \"null_object\"];\nexport const GANACHE_ID = 1569465605456;\nexport const KALE_ID = 1158070613;\nexport const isOwned = address =>\n    address === \"0x0000000000000000000000000000000000000000\" ? false : true;\nexport const getQR = () => qr[1];\nexport const getID = () => qr[0];\n","import React, { useContext, useEffect, useReducer, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Meowbject from \"./contracts/Meowbject\";\nimport { DeviceContext } from \"./DeviceContext\";\nimport { GANACHE_ID, getQR, getID, KALE_ID } from \"./constants\";\n\nexport const Web3Context = React.createContext();\n\nconst KALE_A = \"u1qhdnj7go\";\nconst KALE_B = \"c2uiuaT6hOXr545x90ghGWiuwFC_rLhCTlV0wacrO-k\";\nconst RPC = \"u1wxxj5g51-u1ghyojs49-rpc.us1-azure.kaleido.io\";\nconst KWS = \"u1wxxj5g51-u1ghyojs49-wss.us1-azure.kaleido.io\";\n// const blockPoint = \"http://localhost:8545\";\n// const wssBP = \"ws://localhost:8545\";\nconst blockPoint = `https://${KALE_A}:${KALE_B}@${RPC}`;\n\n// const address = \"0x64051eB06dC09432944012bB3Ac92E5107e48bBe\";\n\n//const address = Meowbject.networks[GANACHE_ID].address;\nconst address = Meowbject.networks[KALE_ID].address;\nconsole.log(\"contract address\", address);\nconst provider = new Web3.providers.HttpProvider(blockPoint);\nconst web3 = new Web3(provider);\nconst meowb = new web3.eth.Contract(Meowbject.abi, address);\n\n// action types\nconst FETCHING = \"FETCHING\";\nconst SUCCESS = \"SUCCESS\";\nconst ERROR = \"ERROR\";\nconst OWNER = \"OWNER\";\nconst TRIBUTES = \"TRIBUTES\";\nwindow.web3 = web3;\nwindow.meow = meowb;\nconst initialState = {\n  fetcher: { response: null, status: null },\n  ownership: { owner: null },\n  tributes: { tributes: null },\n  log: []\n};\n\nconst reducer = (state, action) => {\n  const { response, type, owner, tributes, what } = action;\n  switch (type) {\n    case FETCHING:\n      return {\n        ...state,\n        fetcher: { status: FETCHING },\n        log: [...state.log, `FETCHING > ${what}`]\n      };\n    case SUCCESS:\n      return {\n        ...state,\n        fetcher: { status: SUCCESS, response },\n        log: [...state.log, `SUCCESS: ${what} > ${JSON.stringify(response)}`]\n      };\n    case ERROR:\n      return {\n        ...state,\n        fetcher: { status: ERROR, response },\n        log: [...state.log, `ERROR: ${what} > ${JSON.stringify(response)}`]\n      };\n    case OWNER:\n      return { ...state, ownership: { owner } };\n    case TRIBUTES: {\n      return { ...state, tributes: { tributes } };\n    }\n    default:\n      return state;\n  }\n};\n\nconst Web3Provider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [deviceAddress, setDeviceAddress] = useState();\n  const fingerPrint = useContext(DeviceContext);\n\n  useEffect(() => {\n    if (fingerPrint) {\n      const checkAccount = async () => {\n        const hashedFP = web3.utils.keccak256(fingerPrint);\n        dispatch({ type: FETCHING, what: \"DEVICE_ADDRESS\" });\n        const account = await meowb.methods.checkAccount(hashedFP).call();\n        setDeviceAddress(account);\n        if (account === \"0x0000000000000000000000000000000000000000\") {\n          if ((await web3.eth.net.getId()) === GANACHE_ID) {\n            const gAddress = await web3.eth.getAccounts();\n            await meowb.methods\n              .addAccount(hashedFP, gAddress[0])\n              .send({ from: gAddress[0] });\n            setDeviceAddress(gAddress);\n          } else {\n            dispatch({ type: FETCHING, what: \"CREATING NEW DEVICE ADDRESS\" });\n            const newAddress = web3.eth.accounts.create();\n            setDeviceAddress(newAddress);\n            const addA = await meowb.methods.addAccount(\n              hashedFP,\n              newAddress.address\n            );\n\n            // FOR GANACHE TESTING\n            const encodedABI = addA.encodeABI();\n            const tx = {\n              from: newAddress.address,\n              to: address,\n              gas: 2000000,\n              data: encodedABI\n            };\n            const signedT = await web3.eth.accounts.signTransaction(\n              tx,\n              newAddress.privateKey\n            );\n            const tranny = await web3.eth.sendSignedTransaction(\n              signedT.rawTransaction\n            );\n            dispatch({\n              type: SUCCESS,\n              response: newAddress.address,\n              what: \"NEW DEVICE ADDRESS\"\n            });\n            // .send({ from: newAddress.address });\n          }\n        } else {\n          dispatch({\n            type: SUCCESS,\n            response: account,\n            what: \"DEVICE_ADDRESS\"\n          });\n          setDeviceAddress(account);\n        }\n      };\n      checkAccount();\n    }\n  }, [fingerPrint]);\n\n  const checkOwner = async qr => {\n    console.log(\"check owner\");\n    dispatch({ type: FETCHING, what: \"OWNER\" });\n    try {\n      const response = await meowb.methods.checkOwner(qr).call();\n      dispatch({ type: SUCCESS, response, what: \"OWNER\" });\n      dispatch({ type: OWNER, owner: response });\n      getTributes();\n    } catch (error) {\n      dispatch({ type: ERROR, response: error, what: \"OWNER\" });\n    }\n  };\n\n  const claimQR = async qr => {\n    dispatch({ type: FETCHING, what: \"QRCLAIM\" });\n    try {\n      const account = await web3.eth.getAccounts();\n      const response = await meowb.methods\n        .claimQR(qr[0], qr[1], deviceAddress)\n        .send({ from: account[0] });\n\n      if (response.events.MeowError) {\n        dispatch({\n          type: ERROR,\n          response: response.events.MeowError.returnValues[0],\n          what: \"QRCLAIM\"\n        });\n      } else {\n        dispatch({ type: SUCCESS, response: response, what: \"QRCLAIM\" });\n        dispatch({ type: OWNER, owner: deviceAddress });\n      }\n    } catch (error) {\n      console.log(error.message);\n      dispatch({\n        type: ERROR,\n        response: \"this code is already claimed or does not exist\"\n      });\n    }\n  };\n\n  const getTributes = async () => {\n    dispatch({ type: FETCHING, what: \"ATTRIBUTES\" });\n    const _id = getID();\n    try {\n      const tributes = await meowb.methods.getTributes(_id).call();\n      console.log(tributes);\n      dispatch({ type: SUCCESS, response: tributes, what: \"ATTRIBUTES\" });\n      dispatch({ type: TRIBUTES, tributes });\n    } catch (error) {\n      dispatch({ type: ERROR, response: error.message });\n    }\n  };\n\n  return (\n    <Web3Context.Provider value={{ state, dispatch, checkOwner, claimQR }}>\n      {children}\n    </Web3Context.Provider>\n  );\n};\n\nexport default Web3Provider;\n","import styled from \"styled-components\";\n\nexport const FetchStatus = styled.div`\n  color: white;\n  font-family: monospace;\n  font-weight: bold;\n  background: black;\n  width: 100%;\n  text-align: center;\n  height: 2rem;\n  font-size: 1.6rem;\n  line-height: 2rem;\n  margin-bottom: 1rem;\n`;\n\nexport const Claimtainer = styled.div`\n  margin: 0rem 3rem;\n  line-height: 1.4rem;\n  font-weight: 700;\n  border-left: 0.3rem black solid;\n  padding-left: 1rem;\n`;\n\nexport const Owntainer = styled.div`\ntext-align: center;\n    font-size: 1.4rem;\n    border: 1px black solid;\n    width: 82%;\n    padding: 1rem;\n    margin: auto;\n    box-shadow: 8px 6px black;\n    margin-top:1.5rem;`\n\nexport const Owner = styled.div`\nfont-size: 1rem;\n    width: 80%;\n    overflow-wrap: break-word;\n    text-align: center;\n    margin: auto;\n    padding-top: 0.8rem;\n`\n\nexport const Button = styled.button`\n background: white;\n    color: black;\n    font-family: monospace;\n    display: block;\n    width: 9rem;\n    font-size: 2rem;\n    height: 4rem;\n    margin-top: 3rem;\n    margin: auto;\n    margin-top: 1.1rem;\n    border: 3px black solid;\n`;\n\nexport const LogtainerTitle = styled.div`\n  width: 3rem;\n  border-bottom: 1px solid white;\n  line-height: 1.6rem;\n  margin-bottom: 0.4rem;\n`;\nexport const Logtainer = styled.div`\n  margin: 2rem 1rem 1rem 1.1rem;\n  font-size: 0.7rem;\n  background: black;\n    color: #8e8ee3;\n    padding: 0.6rem;\n    box-shadow: 7px 7px #8e8ee3;\n`;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport web3 from \"web3\";\nimport { Web3Context } from \"./Web3Context\";\nimport { isOwned } from \"./constants\";\nimport * as THREE from \"three\";\nimport {\n  Button,\n  Claimtainer,\n  Owner,\n  Owntainer,\n  FetchStatus,\n  Logtainer,\n  LogtainerTitle\n} from \"./styles\";\nfunction App() {\n  const { checkOwner, checkQR, claimQR, state } = useContext(Web3Context);\n  const qr = window.location.search ? window.location.search.split('?')[1].split(\"-\") : [1, 'null_object'];\n  console.log(qr)\n  const thereIsQR = qr[0] !== \"\" ? true : false;\n  const color = useRef();\n  const three = useRef();\n  useEffect(() => {\n    if (!state.tributes.tributes) return;\n    color.current = state.tributes.tributes.color;\n  }, [state.tributes]);\n  const getColor = () => color.current;\n  useEffect(() => {\n    console.log(thereIsQR);\n    if (thereIsQR) checkOwner(web3.utils.keccak256(qr[1]));\n    return () => { };\n  }, []);\n  useEffect(() => {\n    if (!thereIsQR) return;\n    if (!state.tributes.tributes) return;\n    const scene = new THREE.Scene();\n    console.log(\"THREE\")\n    const halfHeight = window.innerHeight / 1.5;\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / halfHeight,\n      0.1,\n      1000\n    );\n    const renderer = new THREE.WebGLRenderer({ alpha: true });\n    renderer.setSize(window.innerWidth, halfHeight);\n    renderer.setClearColor(0xffffff, 0);\n    console.log(three.current);\n    three.current.appendChild(renderer.domElement);\n\n    const { shape } = state.tributes.tributes;\n    let geometry;\n    if (shape === \"sphere\") {\n      geometry = new THREE.SphereGeometry(1, 32, 32);\n    } else if (shape === \"cube\") {\n      geometry = new THREE.BoxGeometry(1, 1, 1);\n    } else if (shape === \"torus\") {\n      geometry = new THREE.TorusGeometry(1, 0.1, 16, 100);\n    } else if (shape === \"torusknot\") {\n      geometry = new THREE.TorusKnotGeometry(1, 0.3, 20, 16);\n    }\n    const material = new THREE.MeshPhongMaterial({\n      color: \"red\",\n      emissive: 0x2a0000,\n\n      shininess: 10,\n      specular: 0xffffff\n    });\n\n    const cube = new THREE.Mesh(geometry, material);\n    scene.add(cube);\n    var spotLight = new THREE.SpotLight(0xffffff);\n    spotLight.position.set(1.25, 1.25, 1.25);\n    scene.add(spotLight);\n\n    var light = new THREE.AmbientLight(0x404040, 4); // soft white light\n    scene.add(light);\n\n    camera.position.z = 5;\n    function animate() {\n      requestAnimationFrame(animate);\n      material.color = new THREE.Color(getColor());\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n\n      renderer.render(scene, camera);\n    }\n    animate();\n  }, [state.tributes]);\n  const {\n    ownership: { owner },\n    fetcher: { status, response },\n    log\n  } = state;\n  if (!thereIsQR) return <div>nothing to see here</div>;\n  return (\n    <div>\n      <FetchStatus>{status}</FetchStatus>\n\n      <div id=\"three\" ref={three}></div>\n      {isOwned(owner) ? (\n        <Owntainer style={{ textAlign: \"center\", fontSize: \"1.4rem\" }}>\n          <div>claimed by:</div> <Owner>{owner}</Owner>\n        </Owntainer>\n      ) : (\n          <Owntainer>\n            <div style={{\n              textDecoration: 'underline',\n              lineHeight: '3rem'\n            }}>hello friend!</div>\n            <div>would you like to claim this meowbject?</div>\n            <Button onClick={() => claimQR(qr)}>claim</Button>\n          </Owntainer>\n        )}\n      <Logtainer>\n        <LogtainerTitle>\n          DEV_LOG\n        </LogtainerTitle>\n        {log.map((l, i) => (\n          <div\n            key={l + i}\n            style={{\n              borderBottom: \"1px white solid\",\n              padding: \"1rem 0rem 1rem 0rem\",\n              overflowWrap: \"break-word\",\n            }}\n          >\n            {l}\n          </div>\n        ))}\n      </Logtainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport DeviceProvider from \"./DeviceContext\";\nimport Web3Provider from \"./Web3Context\";\n\nReactDOM.render(\n  <DeviceProvider>\n    <Web3Provider>\n      <App />\n    </Web3Provider>\n  </DeviceProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}