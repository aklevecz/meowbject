{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","DeviceContext.js","constants.js","Web3Context.js","styles.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","DeviceContext","React","createContext","DeviceProvider","children","useState","fingerPrint","console","log","useEffect","Provider","value","isOwned","address","Web3Context","blockPoint","Meowbject","networks","provider","Web3","providers","HttpProvider","web3","meowb","eth","Contract","abi","window","meow","initialState","fetcher","response","status","ownership","owner","tributes","reducer","state","action","type","what","JSON","stringify","Web3Provider","useReducer","dispatch","deviceAddress","setDeviceAddress","useContext","a","hashedFP","utils","keccak256","methods","checkAccount","call","account","net","getId","getAccounts","gAddress","addAccount","send","from","newAddress","accounts","create","addA","encodedABI","encodeABI","tx","to","gas","data","signTransaction","privateKey","signedT","sendSignedTransaction","rawTransaction","checkOwner","qr","getTributes","claimQR","events","MeowError","returnValues","message","_id","location","pathname","split","FetchStatus","styled","div","Claimtainer","Button","button","LogtainerTitle","Logtainer","App","checkQR","thereIsQR","color","useRef","three","current","getColor","scene","THREE","halfHeight","innerHeight","camera","innerWidth","renderer","alpha","setSize","setClearColor","appendChild","domElement","geometry","shape","material","emissive","shininess","specular","cube","add","spotLight","position","set","light","z","animate","requestAnimationFrame","rotation","x","y","render","ref","style","textAlign","fontSize","onClick","borderBottom","map","l","i","key","padding","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b905a26f.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 314;","import React, { useEffect, useState } from \"react\";\r\nimport Fingerprint2 from \"fingerprintjs2\";\r\nexport const DeviceContext = React.createContext();\r\n\r\nconst DeviceProvider = ({ children }) => {\r\n  const [fingerPrint, setFingerPrint] = useState(\"trundleaaaa\");\r\n  console.log(fingerPrint);\r\n  useEffect(() => {\r\n    const getFingerPrint = () => {\r\n      if (window.requestIdleCallback) {\r\n        requestIdleCallback(function() {\r\n          Fingerprint2.get(function(components) {\r\n            var values = components.map(function(component) {\r\n              return component.value;\r\n            });\r\n            var murmur = Fingerprint2.x64hash128(values.join(\"\"), 31);\r\n            setFingerPrint(murmur);\r\n          });\r\n        });\r\n      } else {\r\n        setTimeout(function() {\r\n          Fingerprint2.get(function(components) {\r\n            var values = components.map(function(component) {\r\n              return component.value;\r\n            });\r\n            var murmur = Fingerprint2.x64hash128(values.join(\"\"), 31);\r\n            setFingerPrint(murmur);\r\n          });\r\n        }, 500);\r\n      }\r\n    };\r\n    //getFingerPrint();\r\n  }, []);\r\n\r\n  return (\r\n    <DeviceContext.Provider value={fingerPrint}>\r\n      {children}\r\n    </DeviceContext.Provider>\r\n  );\r\n};\r\n\r\nexport default DeviceProvider;\r\n","export const GANACHE_ID = 1569465605456;\r\nexport const KALE_ID = 1158070613;\r\nexport const isOwned = address =>\r\n  address === \"0x0000000000000000000000000000000000000000\" ? false : true;\r\nexport const getQR = () => window.location.pathname.split(\"/\")[1].split(\"-\")[1];\r\nexport const getID = () => window.location.pathname.split(\"/\")[1].split(\"-\")[0];\r\n","import React, { useContext, useEffect, useReducer, useState } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport Meowbject from \"./contracts/Meowbject\";\r\nimport { DeviceContext } from \"./DeviceContext\";\r\nimport { GANACHE_ID, getQR, getID, KALE_ID } from \"./constants\";\r\n\r\nexport const Web3Context = React.createContext();\r\n\r\nconst KALE_A = \"u1qhdnj7go\";\r\nconst KALE_B = \"c2uiuaT6hOXr545x90ghGWiuwFC_rLhCTlV0wacrO-k\";\r\nconst RPC = \"u1wxxj5g51-u1ghyojs49-rpc.us1-azure.kaleido.io\";\r\nconst KWS = \"u1wxxj5g51-u1ghyojs49-wss.us1-azure.kaleido.io\";\r\n// const blockPoint = \"http://localhost:8545\";\r\n// const wssBP = \"ws://localhost:8545\";\r\nconst blockPoint = `https://${KALE_A}:${KALE_B}@${RPC}`;\r\n\r\n// const address = \"0x64051eB06dC09432944012bB3Ac92E5107e48bBe\";\r\n\r\n//const address = Meowbject.networks[GANACHE_ID].address;\r\nconst address = Meowbject.networks[KALE_ID].address;\r\nconsole.log(\"contract address\", address);\r\nconst provider = new Web3.providers.HttpProvider(blockPoint);\r\nconst web3 = new Web3(provider);\r\nconst meowb = new web3.eth.Contract(Meowbject.abi, address);\r\n\r\n// action types\r\nconst FETCHING = \"FETCHING\";\r\nconst SUCCESS = \"SUCCESS\";\r\nconst ERROR = \"ERROR\";\r\nconst OWNER = \"OWNER\";\r\nconst TRIBUTES = \"TRIBUTES\";\r\nwindow.web3 = web3;\r\nwindow.meow = meowb;\r\nconst initialState = {\r\n  fetcher: { response: null, status: null },\r\n  ownership: { owner: null },\r\n  tributes: { tributes: null },\r\n  log: []\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  const { response, type, owner, tributes, what } = action;\r\n  switch (type) {\r\n    case FETCHING:\r\n      return {\r\n        ...state,\r\n        fetcher: { status: FETCHING },\r\n        log: [...state.log, `FETCHING > ${what}`]\r\n      };\r\n    case SUCCESS:\r\n      return {\r\n        ...state,\r\n        fetcher: { status: SUCCESS, response },\r\n        log: [...state.log, `SUCCESS: ${what} > ${JSON.stringify(response)}`]\r\n      };\r\n    case ERROR:\r\n      return { ...state, fetcher: { status: ERROR, response } };\r\n    case OWNER:\r\n      return { ...state, ownership: { owner } };\r\n    case TRIBUTES: {\r\n      return { ...state, tributes: { tributes } };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Web3Provider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const [deviceAddress, setDeviceAddress] = useState();\r\n  const fingerPrint = useContext(DeviceContext);\r\n\r\n  useEffect(() => {\r\n    if (fingerPrint) {\r\n      const checkAccount = async () => {\r\n        const hashedFP = web3.utils.keccak256(fingerPrint);\r\n        dispatch({ type: FETCHING, what: \"DEVICE_ADDRESS\" });\r\n        const account = await meowb.methods.checkAccount(hashedFP).call();\r\n        setDeviceAddress(account);\r\n        if (account === \"0x0000000000000000000000000000000000000000\") {\r\n          if ((await web3.eth.net.getId()) === GANACHE_ID) {\r\n            const gAddress = await web3.eth.getAccounts();\r\n            await meowb.methods\r\n              .addAccount(hashedFP, gAddress[0])\r\n              .send({ from: gAddress[0] });\r\n            setDeviceAddress(gAddress);\r\n          } else {\r\n            dispatch({ type: FETCHING, what: \"CREATING NEW DEVICE ADDRESS\" });\r\n            const newAddress = web3.eth.accounts.create();\r\n            setDeviceAddress(newAddress);\r\n            const addA = await meowb.methods.addAccount(\r\n              hashedFP,\r\n              newAddress.address\r\n            );\r\n\r\n            // FOR GANACHE TESTING\r\n            const encodedABI = addA.encodeABI();\r\n            const tx = {\r\n              from: newAddress.address,\r\n              to: address,\r\n              gas: 2000000,\r\n              data: encodedABI\r\n            };\r\n            const signedT = await web3.eth.accounts.signTransaction(\r\n              tx,\r\n              newAddress.privateKey\r\n            );\r\n            const tranny = await web3.eth.sendSignedTransaction(\r\n              signedT.rawTransaction\r\n            );\r\n            dispatch({\r\n              type: SUCCESS,\r\n              response: newAddress.address,\r\n              what: \"NEW DEVICE ADDRESS\"\r\n            });\r\n            // .send({ from: newAddress.address });\r\n          }\r\n        } else {\r\n          dispatch({\r\n            type: SUCCESS,\r\n            response: account,\r\n            what: \"DEVICE_ADDRESS\"\r\n          });\r\n          setDeviceAddress(account);\r\n        }\r\n      };\r\n      checkAccount();\r\n    }\r\n  }, [fingerPrint]);\r\n\r\n  const checkOwner = async qr => {\r\n    console.log(\"check owner\");\r\n    dispatch({ type: FETCHING, what: \"OWNER\" });\r\n    try {\r\n      const response = await meowb.methods.checkOwner(qr).call();\r\n      dispatch({ type: SUCCESS, response, what: \"OWNER\" });\r\n      dispatch({ type: OWNER, owner: response });\r\n      getTributes();\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, response: error });\r\n    }\r\n  };\r\n\r\n  const claimQR = async qr => {\r\n    dispatch({ type: FETCHING, what: \"QRCLAIM\" });\r\n    try {\r\n      const account = await web3.eth.getAccounts();\r\n      const response = await meowb.methods\r\n        .claimQR(qr[0], qr[1], deviceAddress)\r\n        .send({ from: account[0] });\r\n\r\n      if (response.events.MeowError) {\r\n        dispatch({\r\n          type: ERROR,\r\n          response: response.events.MeowError.returnValues[0]\r\n        });\r\n      } else {\r\n        dispatch({ type: SUCCESS, response: response });\r\n        dispatch({ type: OWNER, owner: deviceAddress });\r\n      }\r\n    } catch (error) {\r\n      console.log(error.message);\r\n      dispatch({\r\n        type: ERROR,\r\n        response: \"this code is already claimed or does not exist\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const getTributes = async () => {\r\n    dispatch({ type: FETCHING, what: \"ATTRIBUTES\" });\r\n    const _id = getID();\r\n    try {\r\n      const tributes = await meowb.methods.getTributes(_id).call();\r\n      console.log(tributes);\r\n      dispatch({ type: SUCCESS, response: tributes, what: \"ATTRIBUTES\" });\r\n      dispatch({ type: TRIBUTES, tributes });\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, response: error.message });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Web3Context.Provider value={{ state, dispatch, checkOwner, claimQR }}>\r\n      {children}\r\n    </Web3Context.Provider>\r\n  );\r\n};\r\n\r\nexport default Web3Provider;\r\n","import styled from \"styled-components\";\r\n\r\nexport const FetchStatus = styled.div`\r\n  color: white;\r\n  position: absolute;\r\n  font-family: monospace;\r\n  font-weight: bold;\r\n  background: black;\r\n  width: 100%;\r\n  text-align: center;\r\n  height: 2rem;\r\n  font-size: 1.6rem;\r\n  line-height: 2rem;\r\n`;\r\n\r\nexport const Claimtainer = styled.div`\r\n  margin: 0rem 3rem;\r\n  line-height: 1.4rem;\r\n  font-weight: 700;\r\n  border-left: 0.3rem black solid;\r\n  padding-left: 1rem;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background: black;\r\n  color: white;\r\n  font-family: monospace;\r\n  margin-left: 3.3rem;\r\n  display: block;\r\n  width: 9rem;\r\n  font-size: 2rem;\r\n  height: 4rem;\r\n  margin-top: 3rem;\r\n  border: 0.4rem red solid;\r\n`;\r\n\r\nexport const LogtainerTitle = styled.div`\r\n  width: 3rem;\r\n  border-bottom: 1px solid black;\r\n  line-height: 1.6rem;\r\n  margin-bottom: 0.4rem;\r\n`;\r\nexport const Logtainer = styled.div`\r\n  margin: 4rem 1rem 1rem 1.1rem;\r\n  font-size: 0.7rem;\r\n`;\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport web3 from \"web3\";\r\nimport { Web3Context } from \"./Web3Context\";\r\nimport { isOwned } from \"./constants\";\r\nimport * as THREE from \"three\";\r\nimport {\r\n  Button,\r\n  Claimtainer,\r\n  FetchStatus,\r\n  Logtainer,\r\n  LogtainerTitle\r\n} from \"./styles\";\r\nfunction App() {\r\n  const { checkOwner, checkQR, claimQR, state } = useContext(Web3Context);\r\n  const qr = window.location.pathname.split(\"/\")[2].split(\"-\");\r\n  const thereIsQR = qr[0] !== \"\" ? true : false;\r\n  const color = useRef();\r\n  const three = useRef();\r\n  useEffect(() => {\r\n    if (!state.tributes.tributes) return;\r\n    color.current = state.tributes.tributes.color;\r\n  }, [state.tributes]);\r\n  const getColor = () => color.current;\r\n  useEffect(() => {\r\n    console.log(thereIsQR);\r\n    if (thereIsQR) checkOwner(web3.utils.keccak256(qr[1]));\r\n    return () => {};\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!thereIsQR) return;\r\n    if (!state.tributes.tributes) return;\r\n    console.log(state.tributes.tributes);\r\n    const scene = new THREE.Scene();\r\n    const halfHeight = window.innerHeight / 1.5;\r\n    const camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / halfHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    const renderer = new THREE.WebGLRenderer({ alpha: true });\r\n    renderer.setSize(window.innerWidth, halfHeight);\r\n    renderer.setClearColor(0xffffff, 0);\r\n    console.log(three.current);\r\n    three.current.appendChild(renderer.domElement);\r\n\r\n    const { shape } = state.tributes.tributes;\r\n    let geometry;\r\n    if (shape === \"sphere\") {\r\n      geometry = new THREE.SphereGeometry(1, 32, 32);\r\n    } else if (shape === \"cube\") {\r\n      geometry = new THREE.BoxGeometry(1, 1, 1);\r\n    } else if (shape === \"torus\") {\r\n      geometry = new THREE.TorusGeometry(1, 0.1, 16, 100);\r\n    } else if (shape === \"torusknot\") {\r\n      geometry = new THREE.TorusKnotGeometry(1, 0.3, 20, 16);\r\n    }\r\n    const material = new THREE.MeshPhongMaterial({\r\n      color: \"red\",\r\n      emissive: 0x2a0000,\r\n\r\n      shininess: 10,\r\n      specular: 0xffffff\r\n    });\r\n\r\n    const cube = new THREE.Mesh(geometry, material);\r\n    scene.add(cube);\r\n    var spotLight = new THREE.SpotLight(0xffffff);\r\n    spotLight.position.set(1.25, 1.25, 1.25);\r\n    scene.add(spotLight);\r\n\r\n    var light = new THREE.AmbientLight(0x404040, 4); // soft white light\r\n    scene.add(light);\r\n\r\n    camera.position.z = 5;\r\n    function animate() {\r\n      requestAnimationFrame(animate);\r\n      material.color = new THREE.Color(getColor());\r\n      cube.rotation.x += 0.01;\r\n      cube.rotation.y += 0.01;\r\n\r\n      renderer.render(scene, camera);\r\n    }\r\n    animate();\r\n  }, [state.tributes]);\r\n  const {\r\n    ownership: { owner },\r\n    fetcher: { status, response },\r\n    log\r\n  } = state;\r\n  if (!thereIsQR) return <div>nothing to see here</div>;\r\n  return (\r\n    <div>\r\n      <FetchStatus>{status}</FetchStatus>\r\n\r\n      <div id=\"three\" ref={three}></div>\r\n      {isOwned(owner) ? (\r\n        <div style={{ textAlign: \"center\", fontSize: \"1.4rem\" }}>\r\n          <div>claimed by:</div> <div style={{ fontSize: \"1rem\" }}>{owner}</div>\r\n        </div>\r\n      ) : (\r\n        <Claimtainer>\r\n          <div>hello friend!</div>\r\n          <div>would you like to claim this meowbject?</div>\r\n          <Button onClick={() => claimQR(qr)}>claim</Button>\r\n        </Claimtainer>\r\n      )}\r\n      <Logtainer>\r\n        <LogtainerTitle style={{ borderBottom: \"1px black solid\" }}>\r\n          DEV_LOG\r\n        </LogtainerTitle>\r\n        {log.map((l, i) => (\r\n          <div\r\n            key={l + i}\r\n            style={{\r\n              borderBottom: \"1px black solid\",\r\n              padding: \"1rem 0rem 1rem 0rem\"\r\n            }}\r\n          >\r\n            {l}\r\n          </div>\r\n        ))}\r\n      </Logtainer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport DeviceProvider from \"./DeviceContext\";\r\nimport Web3Provider from \"./Web3Context\";\r\n\r\nReactDOM.render(\r\n  <DeviceProvider>\r\n    <Web3Provider>\r\n      <App />\r\n    </Web3Provider>\r\n  </DeviceProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}